20180813
进入目录里
git pull:同步git服务器
]# cd /root/桌面/
桌面]# git clone git://124.193.128.166/nsd1804.git 
(在git在那个文件里就在那里存在)
在WINDOWS用Xshell连接服务器操作
+++++++++++++++++++++
虚拟机的组成 (3块)
  内核虚拟化模块(kvm)
  系统设备仿真(qemu)
  虚拟机管理程序(libvirt)
       
一个xml文件(虚拟配置声明文件)
(位置)room9pc01 ~]# ls /etc/libvirt/qemu
networks  node1.xml  node2.xml  win2008.xml
一个磁盘镜像文件(虚拟机的硬盘)
(位置)/var/lib/libvirt/images/
存放放多*.img 

• 虚拟机的磁盘镜像文件格式
特点\类型  RAW    QCOW2
KVM默认    否       是
I/O效率    高       较高
占用空间    大       小
压缩        不支持  支持
后端盘复用  不支持  支持
快照        不支持  支持
(QCOW2格式像气球一样,先给个10G,一开妈他就显示才几M,直到你用到最大限度10G为止)
qemu-img 是虚拟机的磁盘管理命令
qemu-img 支持非常多的磁盘格式,例如 raw、qcow2、vdi、vmdk 等等
• qemu-img 命令格式
– qemu-img 命令 参数 块文件名称 大小
– 常用的命令有
– create 创建一个磁盘
– convert 转换磁盘格式
– info 查看磁盘信息
– snapshot 管理磁盘快照
qemu-img
•创建新的镜像盘文件
– qemu-img create -f 格式 磁盘路径 大小
– qemu-img create -f qcow2 disk.img 50G
查询镜像盘文件的信息
– qemu-img info 磁盘路径-->qemu-img info disk.img
-b 使用后端模板文件
qemu-img create -b disk.img -f qcow2 disk1.img 10G

COW技术原理
• Copy On Write,写时复制
– 直接映射原始盘的数据内容
– 当原始盘的旧数据有修改时,在修改之前自劢将旧数据存
入前端盘
– 对前端盘的修改不回写到原始盘
应用程序
   |
  \|/
(原始盘)  cow
|后端盘|------------>|前端盘|

连接本地/远程kvm   (?怎么这个用不了,virt-manager(这个要先传密钥免密码登录)用得了)
• 使用 virsh 客户端工具
– 连接本地
virsh connect qemu:///system (默认选项)
– 连接远程
– virsh# connect qemu+ssh://user@ip.xx.xx.xx:port/system

创建虚拟交换机
• libvirtd 网络接口
– 原理:调用dnsmasq提供DNS、DHCP等功能
– 创建配置文件 /etc/libvirt/qemu/networks/vbr.xml
<network>
<name>vbr</name>
<bridge name="vbr"/>
<forward mode="nat"/>
<ip address="192.168.1.254" netmask="255.255.255.0">
<dhcp>
<range start="192.168.1.100" end="192.168.1.200"/>
</dhcp>
</ip>
</network>

网络管理
• virsh 管理虚拟网络
– net-list 查看虚拟网络
– net-define vbr.xml 创建虚拟网络
– net-undefine vbr 初除虚拟网络
– net-start vbr 启劢虚拟网络
– net-destroy vbr 停止虚拟网络
– net-edit vbr 修改vbr网络的配置
– net-autostart vbr 设置vbr虚拟网络开机自启劢

xml管理
导出虚拟机
• xml配置文件
– 定义了一个虚拟机的名称、CPU、内存、虚拟磁盘、
网卡等各种参数设置
– 默认位于 /etc/libvirt/qemu/虚拟机名.xml
• 导出xml配置文件
– 查看:virsh dumpxml 虚拟机名
– 备份:virsh dumpxml 虚拟机名 > 虚拟机名.xml
编辑虚拟机设置
• 对虚拟机的配置进行调整
– 编辑:virsh edit 虚拟机名
– 若修改 name、memory、disk、network,可自劢保
存为新虚拟机配置
(补充笔记的)
导入虚拟机
• 根据修改后的独立xml文件定义新虚拟机
– virsh define XML描述文件
]# virsh define /root/rhel-207.xml
定义域 rhel-207(从 /root/rhel-207.xml
删除虚拟机
• 必要时可去除多余的xml配置
– 比如虚拟机改名的情冴
– 避免出现多个虚拟机的磁盘戒MAC地址冲突
– virsh undefine 虚拟机名
[root@kvmsvr ~]# virsh undefine rhel7.2
域 rhel7.2 已经被取消定义

+++++++++++++++++++++++++++++++++++++++
环境准备(真机)
禁用 selinux配置文件 /etc/selinux/config  --- >SELINUX=disabled
禁用 firewalld
    systemctl stop firewalld
    systemctl (un)mask firewalld

yum源的安装和配置(网络yum源,统一用CentOS7-1708.iso)  
(repodata相当yum的索引)
系统光盘YUM (有repodata目录的才可以作为yum源)
自定义YUM源 
  创建:一个repodate目录的yum源,在有rpm包目当输入createrepo .
  更新:如再加入一些rpm包,输入createrepo --update .
++++++++++++++++++++++++++++++++++++++++++++++++
kvm
[root@room9pc01 ~]# lsmod |grep -i kvm
kvm_intel             170086  0 
kvm                   566340  1 kvm_intel
irqbypass              13503  1 kvm

物理机节点 node   virsh nodeinfo
虚拟机信息 dom    virsh dominfo

RAW和qcow2文件格式区别
RAW   创10G是10G 
qcow2  创10G后先是100多k,存储时再扩石,但不能超10G(像吹气球)

格式: qemu-img create -f 格式 磁盘路径  大小
qemu-img create -f qcow2 disk.img 50G

write on copy,copy on write ----->cow
原始文件必须是只读的,不能修改

2.DNS服务器
(真机上)room9pc01 ~]# yum -y install bind bind-chroot 
(如果/etc/named.conf只有几行的话就重卸载后重装)
listen-on port 53 { 192.168.1.254; };
listen-on-v6 port 53 { ::1; };
allow-query     { any; };
forwarders {202.106.196.115; };
dnssec-enable no;
dnssec-validation no;
验证[root@room9pc01 ~]# nslookup
> www.baidu.com
Server:		176.121.0.100
Address:	176.121.0.100#53

chrony时间同步服务器
在真机上room9pc01 ~]# vim /etc/chrony.conf(加入)
server ntp1.aliyun.com iburst
bindacqaddress 0.0.0.0
allow 0/0
在虚拟机上/etc/chrony.conf加入
server 192.168.1.254 iburst
检查方法
一:chronyc sources -v 这命令后*是同步成功 +是备胎 ?是同步失败  
二:date -s "20080808"改时间,再重启systemctl restart chronyd ,date命令多次时间是否更新成功

++++++++++++++++++++++++++
]# cd /var/lib/libvirt/images/
images]# qemu-img create -f qcow2 node.img 10G
7.在新虚拟机上装vim和ifconfig命令的软件包
yum provides 命令  或 yum search 命令   --->查命令对应的软件包
]# yum search ifconfig
匹配：ifconfig ========================
net-tools.x86_64 : Basic networking tools
]# yum provides vim
vim-enhanced-7.4.160-2.el7.x86_64
]# yum -y install net-tools
]# yum -y install vim-enhanced
装tab补全功能软件包
]# yum list | grep bash
bash.x86_64                                 4.2.46-28.el7              @anaconda
bash-completion.noarch                      1:2.1-6.el7
对应包名是bash-completion.noarch 

8.验证数字签名
下载RPM-GPG-KEY-CentOS-7
导入rpm --import RPM-GPG-KEY-CentOS-7
]# sed -i '/gpgcheck/s/0/1/g' CentOS7-1708.repo
]# yum -y install lftp lrzsz bridge-utils

~]# lftp 192.168.1.254
lftp 192.168.1.254:~> ls
drwxr-xr-x    3 0        0            4096 Aug 09 02:24 ceph
drwxr-xr-x    2 0        0            4096 Aug 03  2017 pub
dr-xr-xr-x    9 0        0            4096 Jul 11  2017 rhel7
~]# lftp sftp://176.121.213.77 -u root 连接用户上
passwd: 

9.配置网卡类型
~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE="eth0"
ONBOOT="yes"
NM_CONTROLLED="no"
TYPE="Ethernet"
BOOTPROTO="dhcp"
#IPADDR="192.168.1.50"
#PREFIX="24"
#GATEWAY="192.168.1.254"

禁用空路由
~]# ip r s
default via 192.168.1.254 dev eth0 
169.254.0.0/16 dev eth0 scope link metric 1002 
192.168.1.0/24 dev eth0 proto kernel scope link src 192.168.1.200 
]# vim /etc/sysconfig/network
NOZEROCONF="yes"
:wq

10.添加串口终端
~]#vim /etc/default/grub
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR="$(sed 's, release .*$,,g' /etc/system-release)"
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL="serial console"
GRUB_SERIAL_COMMAND="serial --speed=115200"
GRUB_CMDLINE_LINUX="biosdevname=0 net.ifnames=0 console=ttyS0,115200n8"
GRUB_DISABLE_RECOVERY="true"
GRUB_DISABLE_LINUX_UUID="true"
GRUB_ENABLE_LINUX_LABEL="true"
:wq
~]# grub2-mkconfig -o /boot/grub2/grub.cfg
~]# reboot   //如果配置文件错误,就会重启不起来

11.修改/etc/fstab
UUID改为/dev/vda1
:wq

12.安装分区扩展软件
~]# yum -y install cloud-utils-growpart
– 设置第一次开机自劢扩容根目录
chmod 755 /etc/rc.local
– 在 rc.local 里加入如下配置
/usr/bin/growpart /dev/vda 1
/usr/sbin/xfs_growfs /
/usr/bin/sed '/^###/,$d' -i /etc/rc.d/rc.local

13.关闭虚拟机,清理信息(真机)
room9pc01 ~]# LANG=en_US.UTF-8
room9pc01 ~]# yum search virt-sysprep
 Matched: virt-sysprep =================
libguestfs-tools.noarch 
room9pc01 ~]# yum -y install libguestfs-tools
virt-sysprep -d centos7.0
room9pc01 ~]# virt-sysprep -d centos7.0 (这命令作用?)
这里是一片绿字

14 删除虚拟机定义
   virsh undefine centos7.0 (/etc/libvirt/qemu/里对应的xml文件也会被删除)

15 快速创建虚拟机
   例如创建虚拟机 node1-b
   创建磁盘文件
   cd /var/lib/libvirt/images
   qemu-img create -b node.img -f qcow2 node1.img 50G
   创建虚拟机配置文件 (在1804目录下node)
   sed 's/node/node1/' node.xml >/etc/libvirt/qemu/node1.xml
   virsh define /etc/libvirt/qemu/node1.xml
   启动虚拟机
   virsh start node1
   连接查看虚拟机
   virsh console node1


++++++++++++++++++++++++++++++++++++++++++++++++++
配置 openstack 环境
创建 2 个虚拟机
要求：
虚拟机1 
  8G 内存
  2块网卡
     第一块网卡连接虚拟交换机 vbr  (eth0配1网断和1的网磁)
     第二块网卡连接虚拟交换机 private1 (eth1只配4网段不配网卡,别一台机也一样) 
     设置静态 IP，默认网关 192.168.1.254

     2块硬盘
     其中 / 的 vda1 要求 50G
     vdb  20G

虚拟机2
  6G 内存
  2块网卡
     第一块网卡连接虚拟交换机 vbr
     第二块网卡连接虚拟交换机 private1
     设置静态 IP，默认网关 192.168.1.254
     要求与第一台虚拟主机的两个 IP 都能 ping 通
  硬盘
     / 的 vda1 要求 50G
创建虚拟机
cd /var/lib/libvirt/images
images]# qemu-img create -b node.img -f qcow2 node1.img 50G
nsd1804]# sed 's/node/node1/' node.xml >/etc/libvirt/qemu/node1.xml
]# virsh define /etc/libvirt/qemu/node1.xml 
Domain node1 defined from /etc/libvirt/qemu/node1.xml
]# virsh virsh node1

[root@localhost ~]# lsblk
NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vda    253:0    0  50G  0 disk 
└─vda1 253:1    0   8G  0 part /
localhost ~]# vim /etc/rc.local
/usr/bin/growpart /dev/vda 1
/usr/sbin/xfs_growfs /
/usr/bin/sed '/^###/,$d' -i /etc/rc.d/rc.local
:wq
localhost ~]# source /etc/rc.local
data blocks changed from 2096896 to 13106939
扩容成功50G (不行可以重启下)
[root@localhost ~]# lsblk
NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vda    253:0    0  50G  0 disk 
└─vda1 253:1    0  50G  0 part /

配置好网卡就要关机断电后再开
cd /etc/libvirt/qemu
qemu]# virsh edit node1
修改内存
  <memory unit='KiB'>848000</memory>
  <currentMemory unit='KiB'>848000</currentMemory>
添加网卡   
<interface type='bridge'>
      <mac address='52:54:00:14:de:67'/>
      <source bridge='vbr'/>
      <model type='virtio'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>

    </interface>
    <interface type='bridge'>
      <source bridge='private1'/>
      <model type='virtio'/>
    </interface>
:wq
再在虚拟机里
cd /etc/sysconfig/network-scripts
network-scripts]# vim ifcfg-eth0
DEVICE="eth0"
ONBOOT="yes"
NM_CONTROLLED="no"
TYPE="Ethernet"
BOOTPROTO="static"
IPADDR="192.168.1.68"
PREFIX="24"
GATEWAY="192.168.1.254"
network-scripts]# cp ifcfg-eth0  ifcfg-eth1
network-scripts]# vim ifcfg-eth1
只更改
DEVICE="eth0"
IPADDR="192.168.1.88"
:wq
添加硬盘
cd /var/lib/libvirt/images/
qemu-img create -f qcow2 disk.img 20G

    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='/var/lib/libvirt/images/disk.img'/>
      <target dev='vdb' bus='virtio'/>
    </disk>
(切记,要关机断开电源再开启虚拟主机才生效)
再开启虚拟主机验证eth1和/dev/vdb是free否成功生效
!!!!!注意(问题:vdb1和vda1都是用后端文件创20G的话,uuid会一样)

read -p "input you create hostname :" $a
read -p "size default is 8G or wirte :" $b
H=$a.img
c=${b-:8}G
qemu-img create -b /var/lib/libvirt/images/daxiuge888.qcow2 -fqcow2 $H $c
sed "s/node/$a/" /var/lib/libvirt/images/node.xml >/etc/libvirt/qemu/$a.xml
virsh define /etc/libvirt/qemu/$a.xml
virsh start $H

+ read -p 'input you create hostname :'
input you create hostname :Q
+ read -p 'size default is 8G or wirte :'
size default is 8G or wirte :
+ H=.img
+ c=:8G
+ qemu-img create -b /var/lib/libvirt/images/daxiuge888.qcow2 -fqcow2 .img :8G
qemu-img: Invalid image size specified! You may use k, M, G, T, P or E suffixes for 
qemu-img: kilobytes, megabytes, gigabytes, terabytes, petabytes and exabytes.
+ sed s/node// /var/lib/libvirt/images/node.xml
+ virsh define /etc/libvirt/qemu/.xml
错误：从 /etc/libvirt/qemu/.xml 定义域失败
错误：丢失名称信息

++++++++++++++++++++++++++++++++++++++++
创建后端镜像模板
先创建# qemu-img create -f qcow2 /var/lib/libvirt/images/daxiuge888.qcow2 8G
(如果在virt-manager图形配的后端文件,配qcow2格式,配20G就是20G,初始状态就是20G,感觉BUG,最好按以上用qemu-img先创虚拟机模板容量)
images]# ls -lh daxiuge888.qcow2 
-rw-r--r-- 1 root root 193K 8月  16 17:42 daxiuge888.qcow2
再点创建虚拟机
sed -i '/SELINUX/s/enforcing/disabled/' /etc/selinux/config
cd /etc/yum.repos.d
[root@daxiuge yum.repos.d]# mkdir repo
[root@daxiuge yum.repos.d]# mv C* repo/
[root@daxiuge yum.repos.d]# ls
repo
[root@daxiuge yum.repos.d]# cp repo/CentOS-Base.repo daxiuge.repo
[root@daxiuge yum.repos.d]# cat daxiuge.repo
[daxiuge888]
name=CentOS-daxiuge-7.4
baseurl=http://192.168.1.254/CentOS7-1708
gpgcheck=0
enalbed=1
yum clean all和yum repolist
yum install -y net-tools vim-enhanced bridge-utils psmisc wget
wget  192.168.1.254/CentOS7-1708/RPM-GPG-KEY-CentOS-7
rpm --import RPM-GPG-KEY-CentOS-7
repos.d]# sed -i '/gpgcheck=/s/0/1/' daxiuge.repo 

cat /etc/sysconfig/network-scripts/ifcfg-eth0
# Generated by dracut initrd
DEVICE="eth0"
ONBOOT="yes"
NM_CONTROLLED="no"
TYPE="Ethernet"
BOOTPROTO="dhcp"
#IPADDR="192.168.1.50"
#PREFIX="24"
#GATEWAY="192.168.1.254"

# cat /etc/sysconfig/network
NOZEROCONF="yes"

10.添加串口终端
~]#vim /etc/default/grub
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR="$(sed 's, release .*$,,g' /etc/system-release)"
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL="serial console"
GRUB_SERIAL_COMMAND="serial --speed=115200"
GRUB_CMDLINE_LINUX="biosdevname=0 net.ifnames=0 console=ttyS0,115200n8"
GRUB_DISABLE_RECOVERY="true"
GRUB_DISABLE_LINUX_UUID="true"
GRUB_ENABLE_LINUX_LABEL="true"
:wq
~]# grub2-mkconfig -o /boot/grub2/grub.cfg
~]# reboot   //如果配置文件错误,就会重启不起来

11.修改/etc/fstab
UUID改为/dev/vda1
:wq

12.安装分区扩展软件
~]# yum -y install cloud-utils-growpart
– 设置第一次开机自劢扩容根目录
chmod 755 /etc/rc.local
– 在 rc.local 里加入如下配置
vim /etc/rc.local
/usr/bin/growpart /dev/vda 1
/usr/sbin/xfs_growfs /
/usr/bin/sed '/^###/,$d' -i /etc/rc.d/rc.local
daxiuge ~]# poweroff
+++++++++++++++++++++++++++++
真机上
13.关闭虚拟机,清理信息(真机)
room9pc01 ~]# LANG=en_US.UTF-8
room9pc01 ~]# yum search virt-sysprep
 Matched: virt-sysprep =================
libguestfs-tools.noarch 
room9pc01 ~]# yum -y install libguestfs-tools
virt-sysprep -d centos7.0
room9pc01 ~]# virt-sysprep -d centos7.0 (这命令作用?)
这里是一片绿字
14 删除虚拟机定义
   virsh undefine centos7.0 (/etc/libvirt/qemu/里对应的xml文件也会被删除)





